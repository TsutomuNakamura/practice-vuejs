= Components =
コンポーネントは部品の塊で、画面のパーツをひとまとめにして管理することができます。
またコンポーネントは親子関係を構築することができます。
コンポーネントの欠点として、親コンポーネントから直接データをもらえない事。
それは<code>props</code> を通じて行われます。<br /><br />

これらについて勉強していきましょう。

== スタートポイント ==

* index.html
<syntaxhighlight lang="html">
<!DOCTYPE html>
<html>
<head>
<title>Product App</title>
<link rel="stylesheet" type="text/css" href="style.css" />
</head>
<body>
  <div class="nav-bar"></div>
  <div id="app">
    <div class="product">

      <div class="product-image">
        <img :src="image">
      </div>

      <div class="product-info">
        <h1>{{ title }}</h1>

        <p v-if="inStock">In Stock</p>
        <p v-else>Out of Stock</p>

        <ul>
          <li v-for="detail in details">{{ detail }}</li>
        </ul>

        <div v-for="(variant, index) in variants"
          class="color-box"
          :key="variant.variantId"
          :style="{ backgroundColor: variant.variantColor }"
          @mouseover="updateProduct(index)">
        </div>

        <button v-on:click="addToCart"
          :disabled="!inStock"
          :class="{ disabledButton: !inStock }">Add to Cart</button>

        <div class="cart">
          <p>Cart({{ cart }})</p>
        </div>
      </div>

    </div>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/vue"></script>
  <script src="main.js"></script>
</body>
</html>
</syntaxhighlight>

* main.js
<syntaxhighlight lang="javascript">
var app = new Vue({
  el: '#app',
  data: {
    product: 'Socks',
    brand: 'Vue Mastery',
    selectedVariant: 0,
    details: ["80% cotton", "20% polyester", "Gender-neutral"],
    variants: [
      {
        variantId: 2234,
        variantColor: "green",
        variantImage: "./assets/vmSocks-green.jpg",
        variantQuantity: 10
      },
      {
        variantId: 2235,
        variantColor: "blue",
        variantImage: "./assets/vmSocks-blue.jpg",
        variantQuantity: 0
      }
    ],
    cart: 0
  },
  methods: {
    addToCart() {
      this.cart += 1;
    },
    updateProduct(index) {
      this.selectedVariant = index;
      console.log("index -> " + index);
    }
  },
  computed: {
    title() {
      return this.brand + ' ' + this.product;
    },
    image() {
      return this.variants[this.selectedVariant].variantImage;
    },
    inStock() {
      return this.variants[this.selectedVariant].variantQuantity;
    }
  }
});
</syntaxhighlight>

== コンポーネントを作成する ==
商品が表示されていたエリアをコンポーネントとして、JavaScript 側に外出しします。<br />
またVue インスタンス内にあった<code>data</code>, <code>methods</code>, <code>computed</code> プロパティもコンポーネントの中へ移動します。

* index.html
<syntaxhighlight lang="diff">
 <!DOCTYPE html>
 <html>
 <head>
 <title>Product App</title>
 <link rel="stylesheet" type="text/css" href="style.css" />
 </head>
 <body>
   <div class="nav-bar"></div>
   <div id="app">
-    <div class="product">
-
-      <div class="product-image">
-        <img :src="image">
-      </div>
-
-      <div class="product-info">
-        <h1>{{ title }}</h1>
-
-        <p v-if="inStock">In Stock</p>
-        <p v-else>Out of Stock</p>
-
-        <ul>
-          <li v-for="detail in details">{{ detail }}</li>
-        </ul>
-
-        <div v-for="(variant, index) in variants"
-          class="color-box"
-          :key="variant.variantId"
-          :style="{ backgroundColor: variant.variantColor }"
-          @mouseover="updateProduct(index)">
-        </div>
-
-        <button v-on:click="addToCart"
-          :disabled="!inStock"
-          :class="{ disabledButton: !inStock }">Add to Cart</button>
-
-        <div class="cart">
-          <p>Cart({{ cart }})</p>
-        </div>
-      </div>
-
-    </div>
   </div>
   <script src="https://cdn.jsdelivr.net/npm/vue"></script>
   <script src="main.js"></script>
 </body>
 </html>
</syntaxhighlight>

* main.js
<syntaxhighlight lang="diff">
-var app = new Vue({
-  el: '#app',
+Vue.component('product', {
+  template: `
+    <div class="product">
+
+      <div class="product-image">
+        <img :src="image">
+      </div>
+
+      <div class="product-info">
+        <h1>{{ title }}</h1>
+
+        <p v-if="inStock">In Stock</p>
+        <p v-else>Out of Stock</p>
+
+        <ul>
+          <li v-for="detail in details">{{ detail }}</li>
+        </ul>
+
+        <div v-for="(variant, index) in variants"
+          class="color-box"
+          :key="variant.variantId"
+          :style="{ backgroundColor: variant.variantColor }"
+          @mouseover="updateProduct(index)">
+        </div>
+
+        <button v-on:click="addToCart"
+          :disabled="!inStock"
+          :class="{ disabledButton: !inStock }">Add to Cart</button>
+
+        <div class="cart">
+          <p>Cart({{ cart }})</p>
+        </div>
+      </div>
+
+    </div>
+  `,
   data: {
     product: 'Socks',
     brand: 'Vue Mastery',
     selectedVariant: 0,
     details: ["80% cotton", "20% polyester", "Gender-neutral"],
     variants: [
       {
         variantId: 2234,
         variantColor: "green",
         variantImage: "./assets/vmSocks-green.jpg",
         variantQuantity: 10
       },
       {
         variantId: 2235,
         variantColor: "blue",
         variantImage: "./assets/vmSocks-blue.jpg",
         variantQuantity: 0
       }
     ],
     cart: 0
   },
   methods: {
     addToCart() {
       this.cart += 1;
     },
     updateProduct(index) {
       this.selectedVariant = index;
       console.log("index -> " + index);
     }
   },
   computed: {
     title() {
       return this.brand + ' ' + this.product;
     },
     image() {
       return this.variants[this.selectedVariant].variantImage;
     },
     inStock() {
       return this.variants[this.selectedVariant].variantQuantity;
     }
   }
+});
+
+var app = new Vue({
+  el: '#app',
 });
</syntaxhighlight>

そして、ここでdata を値ではなくメソッド化して、常に新しいインスタンスを<code>return</code> するように変更します。
なぜこの対応が必要なのかと言うと、それぞれの<code>product</code> コンポーネントは、同じ<code>data</code> を全コンポーネントで共有してしまうことになり、再利用性という目的を満たせなくなってしまうためです。<br />
コンポーネント間での副作用をなくすためにも<code>data</code> は各コンポーネントインスタンス毎に新しくインスタンス化するようにしましょう。

* main.js
<syntaxhighlight lang="diff">
 Vue.component('product', {
   template: `
     <div class="product">

       <div class="product-image">
         <img :src="image">
       </div>

       <div class="product-info">
         <h1>{{ title }}</h1>

         <p v-if="inStock">In Stock</p>
         <p v-else>Out of Stock</p>

         <ul>
           <li v-for="detail in details">{{ detail }}</li>
         </ul>

         <div v-for="(variant, index) in variants"
           class="color-box"
           :key="variant.variantId"
           :style="{ backgroundColor: variant.variantColor }"
           @mouseover="updateProduct(index)">
         </div>

         <button v-on:click="addToCart"
           :disabled="!inStock"
           :class="{ disabledButton: !inStock }">Add to Cart</button>

         <div class="cart">
           <p>Cart({{ cart }})</p>
         </div>
       </div>

     </div>
   `,
-  data: {
-    product: 'Socks',
-    brand: 'Vue Mastery',
-    selectedVariant: 0,
-    details: ["80% cotton", "20% polyester", "Gender-neutral"],
-    variants: [
-      {
-        variantId: 2234,
-        variantColor: "green",
-        variantImage: "./assets/vmSocks-green.jpg",
-        variantQuantity: 10
-      },
-      {
-        variantId: 2235,
-        variantColor: "blue",
-        variantImage: "./assets/vmSocks-blue.jpg",
-        variantQuantity: 0
-      }
-    ],
-    cart: 0
+  data() {
+    return {
+      product: 'Socks',
+      brand: 'Vue Mastery',
+      selectedVariant: 0,
+      details: ["80% cotton", "20% polyester", "Gender-neutral"],
+      variants: [
+        {
+          variantId: 2234,
+          variantColor: "green",
+          variantImage: "./assets/vmSocks-green.jpg",
+          variantQuantity: 10
+        },
+        {
+          variantId: 2235,
+          variantColor: "blue",
+          variantImage: "./assets/vmSocks-blue.jpg",
+          variantQuantity: 0
+        }
+      ],
+      cart: 0
+    }
   },
   methods: {
     addToCart() {
       this.cart += 1;
     },
     updateProduct(index) {
       this.selectedVariant = index;
       console.log("index -> " + index);
     }
   },
   computed: {
     title() {
       return this.brand + ' ' + this.product;
     },
     image() {
       return this.variants[this.selectedVariant].variantImage;
     },
     inStock() {
       return this.variants[this.selectedVariant].variantQuantity;
     }
   }
 });

 var app = new Vue({
   el: '#app',
 });
</syntaxhighlight>

これでコンポーネントの作成は完了です。
次はhtml 側でこの<code>product</code>コンポーネントを呼び出すように修正しましょう。

* index.html
<syntaxhighlight lang="diff">
 <!DOCTYPE html>
 <html>
 <head>
 <title>Product App</title>
 <link rel="stylesheet" type="text/css" href="style.css" />
 </head>
 <body>
   <div class="nav-bar"></div>
   <div id="app">
+    <product></product>
   </div>
   <script src="https://cdn.jsdelivr.net/npm/vue"></script>
   <script src="main.js"></script>
 </body>
 </html>
</syntaxhighlight>

これでコンポーネント化は完成です。
それではWeb 画面を表示して確認してみましょう。

[[Image:08_Components0001.png]]

見た目は同じですが、コンポーネント化された画面が表示されるようになっています。
要素を見てみると、<code>product</code> というクラス名で、内容が展開されているのを確認できます。

[[Image:08_Components0002.png]]

== コンポーネントを再利用する ==
コンポーネント化の大きな魅力として再利用できるところにあります。
以下のようにして<code>product</code> コンポーネントを複製して見ましょう。

* index.html
<syntaxhighlight lang="html">
 <!DOCTYPE html>
 <html>
 <head>
 <title>Product App</title>
 <link rel="stylesheet" type="text/css" href="style.css" />
 </head>
 <body>
   <div class="nav-bar"></div>
   <div id="app">
     <product></product>
+    <product></product>
+    <product></product>
   </div>
   <script src="https://cdn.jsdelivr.net/npm/vue"></script>
   <script src="main.js"></script>
 </body>
 </html>
</syntaxhighlight>

Web 画面を確認すると以下のように表示されます。

[[Image:08_Components0003.png]]

ここで、次のレクチャーに進むために一旦<code>product</code> コンポーネントは削除しておきます。

* index.html
<syntaxhighlight lang="html">
 <!DOCTYPE html>
 <html>
 <head>
 <title>Product App</title>
 <link rel="stylesheet" type="text/css" href="style.css" />
 </head>
 <body>
   <div class="nav-bar"></div>
   <div id="app">
     <product></product>
-    <product></product>
-    <product></product>
   </div>
   <script src="https://cdn.jsdelivr.net/npm/vue"></script>
   <script src="main.js"></script>
 </body>
 </html>
</syntaxhighlight>

== prop でデータを渡す ==
prop でコンポーネントに対してデータを渡していきます。<br />
今回はプレミアムユーザかどうかのフラグをprop として親インスタンスからコンポーネントに渡す例を参考にやっていきたい思います。<br />
main.js にprop として渡す<code>premium</code> を定義します。そしてhtml 側でpremium 変数を<code>v-bind</code> でpremium コンポーネントにその値を渡し、premium コンポーネント内ではprop を受け取る定義(props プロパティの定義)をし、template 内にprop として渡されたpremium を利用します。

* main.js
<syntaxhighlight lang="diff">
 Vue.component('product', {
+  props: {
+    premium: {
+      type: Boolean,
+      required: true
+    }
+  },
   template: `
     <div class="product">

       <div class="product-image">
         <img :src="image">
       </div>

       <div class="product-info">
         <h1>{{ title }}</h1>

         <p v-if="inStock">In Stock</p>
         <p v-else>Out of Stock</p>
+        <p>User is premium: {{ premium }}</p>

         <ul>
           <li v-for="detail in details">{{ detail }}</li>
         </ul>

         <div v-for="(variant, index) in variants"
           class="color-box"
           :key="variant.variantId"
           :style="{ backgroundColor: variant.variantColor }"
           @mouseover="updateProduct(index)">
         </div>

         <button v-on:click="addToCart"
           :disabled="!inStock"
           :class="{ disabledButton: !inStock }">Add to Cart</button>

         <div class="cart">
           <p>Cart({{ cart }})</p>
         </div>
       </div>

     </div>
   `,
   data() {
     return {
       product: 'Socks',
       brand: 'Vue Mastery',
       selectedVariant: 0,
       details: ["80% cotton", "20% polyester", "Gender-neutral"],
       variants: [
         {
           variantId: 2234,
           variantColor: "green",
           variantImage: "./assets/vmSocks-green.jpg",
           variantQuantity: 10
         },
         {
           variantId: 2235,
           variantColor: "blue",
           variantImage: "./assets/vmSocks-blue.jpg",
           variantQuantity: 0
         }
       ],
       cart: 0
     }
   },
   methods: {
     addToCart() {
       this.cart += 1;
     },
     updateProduct(index) {
       this.selectedVariant = index;
       console.log("index -> " + index);
     }
   },
   computed: {
     title() {
       return this.brand + ' ' + this.product;
     },
     image() {
       return this.variants[this.selectedVariant].variantImage;
     },
     inStock() {
       return this.variants[this.selectedVariant].variantQuantity;
     }
   }
 });

 var app = new Vue({
   el: '#app',
+  data: {
+    premium: true
+  }
 });
</syntaxhighlight>

html 内には<code>v-bind</code> としてpremium 属性を指定します。

* index.html
<syntaxhighlight lang="diff">
 <!DOCTYPE html>
 <html>
 <head>
 <title>Product App</title>
 <link rel="stylesheet" type="text/css" href="style.css" />
 </head>
 <body>
   <div class="nav-bar"></div>
   <div id="app">
-    <product></product>
+    <product :premium="premium"></product>
   </div>
   <script src="https://cdn.jsdelivr.net/npm/vue"></script>
   <script src="main.js"></script>
 </body>
 </html>
</syntaxhighlight>

[[Image:08_Components0004.png]]

画面の表示が<code>User is premium: true</code> と表示されることが確認できると思います。<br />
ここでprop の値をコンソールからfalse にしてみましょう。

* console
<syntaxhighlight lang="text">
> app.premium = false;
</syntaxhighlight>

[[Image:08_Components0005.png]]

すると画面表示もfalse に変わることが確認できます。

== premium は配送料を無料にしてみる ==
もっと現実的な実装として、premium なユーザは配送料を無料にするような実装をしてみましょう。<br />
まずはmain.js 内のコンポーネントを編集して画面の表示を変更します。<br />
そしてpremium だったら配送料をFree、そうでなければ2.99 ドルと表示されるようにcomputed を追加します。

* index.html
<syntaxhighlight lang="diff">
 Vue.component('product', {
   props: {
     premium: {
       type: Boolean,
       required: true
     }
   },
   template: `
     <div class="product">

       <div class="product-image">
         <img :src="image">
       </div>

       <div class="product-info">
         <h1>{{ title }}</h1>

         <p v-if="inStock">In Stock</p>
         <p v-else>Out of Stock</p>
-        <p>User is premium: {{ premium }}</p>
+        <p>Shipping: {{ shipping }}</p>

         <ul>
           <li v-for="detail in details">{{ detail }}</li>
         </ul>

         <div v-for="(variant, index) in variants"
           class="color-box"
           :key="variant.variantId"
           :style="{ backgroundColor: variant.variantColor }"
           @mouseover="updateProduct(index)">
         </div>

         <button v-on:click="addToCart"
           :disabled="!inStock"
           :class="{ disabledButton: !inStock }">Add to Cart</button>

         <div class="cart">
           <p>Cart({{ cart }})</p>
         </div>
       </div>

     </div>
   `,
   data() {
     return {
       product: 'Socks',
       brand: 'Vue Mastery',
       selectedVariant: 0,
       details: ["80% cotton", "20% polyester", "Gender-neutral"],
       variants: [
         {
           variantId: 2234,
           variantColor: "green",
           variantImage: "./assets/vmSocks-green.jpg",
           variantQuantity: 10
         },
         {
           variantId: 2235,
           variantColor: "blue",
           variantImage: "./assets/vmSocks-blue.jpg",
           variantQuantity: 0
         }
       ],
       cart: 0
     }
   },
   methods: {
     addToCart() {
       this.cart += 1;
     },
     updateProduct(index) {
       this.selectedVariant = index;
       console.log("index -> " + index);
     }
   },
   computed: {
     title() {
       return this.brand + ' ' + this.product;
     },
     image() {
       return this.variants[this.selectedVariant].variantImage;
     },
     inStock() {
       return this.variants[this.selectedVariant].variantQuantity;
+    },
+    shipping() {
+      if(this.premium) {
+        return "Free";
+      }
+      return 2.99;
     }
   }
 });

 var app = new Vue({
   el: '#app',
   data: {
     premium: true
   }
 });
</syntaxhighlight>

[[Image:08_Components0006.png]]

すると画面のように<code>Shipping: Free</code> と表示されます。
ここで先ほどと同様に、コンソールからpremium をfalse にしてみましょう。

* console
<syntaxhighlight lang="text">
> app.premium = false;
</syntaxhighlight>

[[Image:08_Components0007.png]]

すると画面の配送料の表示が<code>2.99</code> に変わるのが確認できます。

= 参考 =
; Components
: https://www.vuemastery.com/courses/intro-to-vue-js/components

